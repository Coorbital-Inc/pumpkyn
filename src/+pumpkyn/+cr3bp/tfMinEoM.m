function [yDot,Ht,dHdy] = tfMinEoM(tau,y,Tmax,c,muStar) %#ok<INUSD>
%% Purpose:
%
%  This routine contains the low-thrust equations of motion in the CR3BP
%  designed to be integrated by a numerical integration routine such as
%  ODE78, ODE113, and ODE45.  This routine will also compute the
%  corresponding state transition matrix along with the states (optional).
%
%  References:
%  2015. AIAA. JGCD. Low-Thrust Minimum-Fuel Optimization in the Circular
%  Restricted Three-Body Problem.
%
%% Inputs:
%
%  tau                      double                  Dimensionless Time
%
%
%  y                        [14 x 1]                Initial States
%                                                   Dimensionless:
%                                                   -------
%                                                   r [x,y,z]
%                                                   v [dr/dt]
%                                                   m [ND]
%                                                   lambda_r [x,y,z]
%                                                   lambda_v [x,y,z]
%                                                   lambda_m 
%
%  Tmax                     double                  Maximum Thrust
%                                                   Magnitude (N)
%
%  c                        double                  Exhaust Velocity
%                                                   (c = Isp*g0) of
%                                                   specific impulse
%
%  muStar                   double                  Mass Ratio of
%                                                   two primaries
%                                                   muStar = m2/(m1+m2)
%
%% Outputs:
%
%  yDot                     [14 x 1]                Derivative of Initial
%                                                   Dimensionless States
%                                                   With Respect to
%                                                   dimensionless time tau.
%% Revision History:
%  Darin C. Koblick                                          (c) 10/27/2025
%  Copyright Coorbital Inc.
%% ------------------------ Begin Code Sequence ---------------------------
if nargin == 0
   %Table Three: Minimum Time Solutions Computed:
   muStar = 1.21506683E-2;
    lStar = 3.84405000E5;   %characteristic length (km)
    tStar = 3.75676967E5;   %characteristic time (s)
       m0 = 1500;           %Initial Satellite mass (kg)
       g0 = 9.80665*tStar*tStar/lStar;              %m/s^2 -> ND
     Tmax = 10;                                     %Newtons
     Tmax = (Tmax/m0)*tStar^2/(lStar*1000);         %Max Thrust ND 
     %  tf = 7.8549*86400/tStar;                     %Days ->ND
      Isp = 3000/tStar;    %Specific Impulse s -> ND
        c = Isp*g0;         %Exhuast Velocity (ND)

       %Boundary Conditions:
       r0 = [-0.019488511458668,-0.016033479812051,0];
       v0 = [8.918881923678198,-4.081793688818725,0];

       %Initial States:
       lambda_r0 = [15.616017, 32.875896, -0.094522];
       lambda_v0 = [-0.101606, 0.044791, -0.000150];
       lambda_m0 = 0.133266;
            PHI0 = eye(14);
        y = [r0(:); v0(:); 1; lambda_r0(:); lambda_v0(:); lambda_m0; PHI0(:)];
     yDot = pumpkyn.cr3bp.tfMinEoM(0,y,Tmax,c,muStar);
        return;
end
%Extract initial states:
        r = y(1:3);
        v = y(4:6);
        m = y(7);
 lambda_r = y(8:10);
 lambda_v = y(11:13);
 lambda_m = y(14);
lambda_rx = lambda_r(1);
lambda_ry = lambda_r(2);
lambda_rz = lambda_r(3);
lambda_vx = lambda_v(1);
lambda_vy = lambda_v(2);
lambda_vz = lambda_v(3);
     PHI = [];
if numel(y) > 14
     PHI = reshape(y(15:210),[14 14]);
end
%Re-assign variables:
       x = r(1);
       y = r(2);
       z = r(3);
    xDot = v(1); 
    yDot = v(2);
    zDot = v(3);
%Definition of g(r) and h(v) functions (Equation 2)
       d = sqrt((x + muStar)^2 + y^2 + z^2);
       r = sqrt((x - 1 + muStar)^2 + y^2 + z^2);
      d3 = d^3;
      r3 = r^3;
      d5 = d^5;
      r5 = r^5;
      d7 = d^7;
      r7 = r^7;
      gr = [x - (1-muStar)*(x+muStar)/d3 - muStar*(x-1+muStar)/r3
            y - (1-muStar)*y/d3 - muStar*y/r3
            0 - (1-muStar)*z/d3 - muStar*z/r3];
      hv = [+2.*yDot
            -2.*xDot;
            +0];
%See CR3BP Equations of Motion in eom.m:
%  d = sqrt((x + muStar)^2 + y^2 + z^2);
%  r = sqrt((x - 1 + muStar)^2 + y^2 + z^2);
% d3 = d^3;
% r3 = d^3;
%   xDDot =  x - (1-muStar)*(x+muStar)/d3 - muStar*(x-1+muStar)/r3 + 2*ydot;
%   yDDot =  y - (1-muStar)*y/d3 - muStar*y/r3 - 2*xdot;
%   zDDot =  -(1-muStar)*z/d3 - muStar*z/r3;

%Determine G = d g(r) / dr
% G = jacobian(gr,[x,y,z]);, see Eq 8
% clear d3 d5 r3 r5;
% G = subs(G,((muStar + x)^2 + y^2 + z^2)^(3/2),'d3');
% G = subs(G,((muStar + x)^2 + y^2 + z^2)^(5/2),'d5');
% G = subs(G,((muStar + x - 1)^2 + y^2 + z^2)^(3/2),'r3');
% G = subs(G,((muStar + x - 1)^2 + y^2 + z^2)^(5/2),'r5');
     G = zeros(3,3);
G(1,1) = (muStar - 1)/d3 - muStar/r3 - (3*(muStar + x)*(muStar + x)*(muStar - 1))/d5 + ...
         (3*muStar*(muStar + x - 1)*(muStar + x - 1))/r5 + 1;
G(1,2) = (3*muStar*y*(muStar + x - 1))/r5 - (3*y*(muStar + x)*(muStar - 1))/d5;
G(1,3) = (3*muStar*z*(muStar + x - 1))/r5 - (3*z*(muStar + x)*(muStar - 1))/d5;
G(2,1) = G(1,2);
G(2,2) = (muStar - 1)/d3 - muStar/r3 + (3*muStar*y^2)/r5 - (3*y^2*(muStar - 1))/d5 + 1;
G(2,3) = (3*muStar*y*z)/r5 - (3*y*z*(muStar - 1))/d5;
G(3,1) = G(1,3);
G(3,2) = G(2,3);
G(3,3) = (muStar - 1)/d3 - muStar/r3 + (3*muStar*z^2)/r5 - (3*z^2*(muStar - 1))/d5;
%Determine H = d h(v) / dv
%  H = jacobian(hv,[xDot,yDot,zDot]);, see Eq 8
         H = zeros(3,3);
    H(1,2) = 2;
    H(2,1) = -H(1,2);
%Determine the minimum-time switching function (Equation 19):
           S = -norm(lambda_v)*c/m - lambda_m;
           u = 1;
           if S > 0
                u = 0;
           end
%Hamiltonian for Minimum Time (Equation 17):
       alpha = -lambda_v./norm(lambda_v);                  %Equation 10
        rDot =  v;
        vDot =  gr + hv + u.*alpha.*Tmax./m;
        mDot = -u*Tmax/c;

if nargout > 1      
          Ht = 1 + dot(lambda_r,rDot,1) + dot(lambda_v,vDot,1) + lambda_m*mDot;
end

if nargout > 2
%Compute dHdy = [dH/dx, dH/dy, dH/dz, dH/dv, dH/dm, dH/dLr, dH/dLv, dHdLm]
   dHdy(1,1) = lambda_vy*((3*muStar*y*(2*muStar + 2*x - 2))/(2*r5) - ...
               (3*y*(2*muStar + 2*x)*(muStar - 1))/(2*d5)) + ...
               lambda_vz*((3*muStar*z*(2*muStar + 2*x - 2))/(2*r5) - ...
               (3*z*(2*muStar + 2*x)*(muStar - 1))/(2*d5)) + ...
               lambda_vx*((muStar - 1)/d3 - muStar/r3 - ...
               (3*(2*muStar + 2*x)*(muStar + x)*(muStar - 1))/(2*d5) + ...
               (3*muStar*(2*muStar + 2*x - 2)*(muStar + x - 1))/(2*r5) + 1);%diff(Ht,x)
   dHdy(1,2) = lambda_vx*((3*muStar*y*(muStar + x - 1))/r5 - ...
               (3*y*(muStar + x)*(muStar - 1))/d5) + lambda_vz*((3*muStar*y*z)/r5 - ...
               (3*y*z*(muStar - 1))/d5) + lambda_vy*((muStar - 1)/d3 - muStar/r3 + ...
               (3*muStar*y^2)/r5 - (3*y^2*(muStar - 1))/d5 + 1);           %diff(Ht,y)
   dHdy(1,3) = lambda_vx*((3*muStar*z*(muStar + x - 1))/r5 - ...
               (3*z*(muStar + x)*(muStar - 1))/d5) + lambda_vy*((3*muStar*y*z)/r5 - ...
               (3*y*z*(muStar - 1))/d5) - lambda_vz*(muStar/r3 - (muStar - 1)/d3 - ...
               (3*muStar*z^2)/r5 + (3*z^2*(muStar - 1))/d5);               %diff(Ht,z)
  dHdy(1,4) = lambda_rx - 2*lambda_vy;                                     %diff(Ht,xDot)
  dHdy(1,5) = lambda_ry + 2*lambda_vx;                                     %diff(Ht,yDot)
  dHdy(1,6) = lambda_rz;                                                   %diff(Ht,zDot)
  dHdy(1,7) = Tmax*u*norm(lambda_v)/m^2;                                   %diff(Ht,m)
  dHdy(1,8) = xDot; %diff(Ht,lambda_rx)
  dHdy(1,9) = yDot; %diff(Ht,lambda_ry)
 dHdy(1,10) = zDot; %diff(Ht,lambda_rz)
 dHdy(1,11) = x + 2*yDot + ((muStar + x)*(muStar - 1))/ ...
             (muStar^2 + 2*muStar*x + x^2 + y^2 + z^2)^(3/2) - ...
             (muStar*(muStar + x - 1))/r3 - ...
             (Tmax*lambda_vx*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(1/2)) + ...
             (Tmax*lambda_vx*lambda_vy^2*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2)) + ...
             (Tmax*lambda_vx*lambda_vz^2*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2)) - ...
             (Tmax*lambda_vx*u*(lambda_vy^2 + lambda_vz^2))/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2));
 dHdy(1,12) = y - 2*xDot - y/(muStar^2 + 2*muStar*x + x^2 + y^2 + z^2)^(3/2) - ...
              (muStar*y)/r3 + (muStar*y)/(muStar^2 + 2*muStar*x + x^2 + y^2 + z^2)^(3/2) - ...
              (2*Tmax*lambda_vy*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(1/2)) + ...
              (Tmax*lambda_vy^3*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2)) + ...
              (Tmax*lambda_vx^2*lambda_vy*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2)) + ...
              (Tmax*lambda_vy*lambda_vz^2*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2));

 dHdy(1,13) = (muStar*z)/(muStar^2 + 2*muStar*x + x^2 + y^2 + z^2)^(3/2) - ...
              (muStar*z)/r3 - z/(muStar^2 + 2*muStar*x + x^2 + y^2 + z^2)^(3/2) - ...
              (2*Tmax*lambda_vz*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(1/2)) + ...
              (Tmax*lambda_vz^3*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2)) + ...
              (Tmax*lambda_vx^2*lambda_vz*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2)) + ...
              (Tmax*lambda_vy^2*lambda_vz*u)/(m*(lambda_vx^2 + lambda_vy^2 + lambda_vz^2)^(3/2));

 dHdy(1,14) = mDot;
end

%Costate Derivatives:
 lambdaDot_r = -G'*lambda_v;
 lambdaDot_v = -lambda_r - H'*lambda_v;
 lambdaDot_m = -norm(lambda_v)*u*Tmax/m^2;

%All State Derivatives (Equation 15):
        yDot = [rDot(:); 
                vDot(:); 
                mDot; 
                lambdaDot_r(:); 
                lambdaDot_v(:); 
                lambdaDot_m];

%Compute the Derivative of the State Transition Matrix (STM):
% jacobian(y, [r,v,m,lambda_r,lambda_v,lambda_m])
% A = [14 x 14]
if ~isempty(PHI)
            A = zeros(14,14);
 lambda_v_Mag = norm(lambda_v);
        A(1,:) = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        A(2,:) = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        A(3,:) = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0];
    A(4:6,1:3) =  G;
    A(4:6,4:6) =  H;
 A(8:10,11:13) = -G';
A(11:13,11:13) = -H';

  A(4,7) = Tmax*lambda_vx*u/(lambda_v_Mag*m^2);

 A(4,11) = -(Tmax*u*(lambda_vy^2 + lambda_vz^2))/(lambda_v_Mag^3*m);
 A(4,12) = (Tmax*lambda_vx*lambda_vy*u)/(lambda_v_Mag^3*m);
 A(4,13) = (Tmax*lambda_vx*lambda_vz*u)/(lambda_v_Mag^3*m);
 A(5,7)  = (Tmax*lambda_vy*u)/(lambda_v_Mag*m^2);
 A(5,11) = (Tmax*lambda_vx*lambda_vy*u)/(lambda_v_Mag^3*m);
 A(5,12) = -(Tmax*u*(lambda_vx^2 + lambda_vz^2))/(lambda_v_Mag^3*m);
 A(5,13) = (Tmax*lambda_vy*lambda_vz*u)/(lambda_v_Mag^3*m);

   A(6,7) = (Tmax*lambda_vz*u)/(lambda_v_Mag*m^2);
  A(6,11) = (Tmax*lambda_vx*lambda_vz*u)/(lambda_v_Mag^3*m);
  A(6,12) = (Tmax*lambda_vy*lambda_vz*u)/(lambda_v_Mag^3*m);
  A(6,13) = -(Tmax*u*(lambda_vx^2 + lambda_vy^2))/(lambda_v_Mag^3*m);

   A(8,1) = (9*lambda_vx*muStar)/r5 - (3*lambda_vy*y)/d5 - (3*lambda_vz*z)/d5 - ...
            (9*lambda_vx*x)/d5 - (15*lambda_vx*muStar)/r7 + (9*lambda_vx*muStar^2)/d5 + ...
            (15*lambda_vx*muStar^3)/d7 - (15*lambda_vx*muStar^4)/d7 + (15*lambda_vx*x^3)/d7 - ...
            (9*lambda_vx*muStar^2)/r5 + (45*lambda_vx*muStar^2)/r7 - (45*lambda_vx*muStar^3)/r7 + ...
            (15*lambda_vx*muStar^4)/r7 - (9*lambda_vx*muStar)/d5 - (45*lambda_vx*muStar^2*x^2)/d7 + ...
            (45*lambda_vx*muStar^2*x^2)/r7 + (9*lambda_vx*muStar*x)/d5 + (3*lambda_vy*muStar*y)/d5 + ...
            (3*lambda_vz*muStar*z)/d5 - (9*lambda_vx*muStar*x)/r5 + (45*lambda_vx*muStar*x)/r7 - ...
            (3*lambda_vy*muStar*y)/r5 + (15*lambda_vy*muStar*y)/r7 - (3*lambda_vz*muStar*z)/r5 + ...
            (15*lambda_vz*muStar*z)/r7 + (45*lambda_vx*muStar*x^2)/d7 + (45*lambda_vx*muStar^2*x)/d7 - ...
            (15*lambda_vx*muStar*x^3)/d7 - (45*lambda_vx*muStar^3*x)/d7 + (15*lambda_vy*muStar^2*y)/d7 - ...
            (15*lambda_vy*muStar^3*y)/d7 + (15*lambda_vz*muStar^2*z)/d7 - (15*lambda_vz*muStar^3*z)/d7 + ...
            (15*lambda_vy*x^2*y)/d7 + (15*lambda_vz*x^2*z)/d7 - (45*lambda_vx*muStar*x^2)/r7 - ...
            (90*lambda_vx*muStar^2*x)/r7 + (15*lambda_vx*muStar*x^3)/r7 + (45*lambda_vx*muStar^3*x)/r7 - ...
            (30*lambda_vy*muStar^2*y)/r7 + (15*lambda_vy*muStar^3*y)/r7 - (30*lambda_vz*muStar^2*z)/r7 + ...
            (15*lambda_vz*muStar^3*z)/r7 - (15*lambda_vy*muStar*x^2*y)/d7 - (30*lambda_vy*muStar^2*x*y)/d7 - ...
            (15*lambda_vz*muStar*x^2*z)/d7 - (30*lambda_vz*muStar^2*x*z)/d7 + (15*lambda_vy*muStar*x^2*y)/r7 + ...
            (30*lambda_vy*muStar^2*x*y)/r7 + (15*lambda_vz*muStar*x^2*z)/r7 + (30*lambda_vz*muStar^2*x*z)/r7 + ...
            (30*lambda_vy*muStar*x*y)/d7 + (30*lambda_vz*muStar*x*z)/d7 - (30*lambda_vy*muStar*x*y)/r7 - ...
            (30*lambda_vz*muStar*x*z)/r7;

   A(8,2) = (3*lambda_vy*muStar)/r5 - (3*lambda_vx*y)/d5 - (3*lambda_vy*x)/d5 + ...
            (3*lambda_vy*muStar^2)/d5 - (3*lambda_vy*muStar^2)/r5 - (3*lambda_vy*muStar)/d5 - ...
            (15*lambda_vy*muStar^2*y^2)/d7 + (15*lambda_vy*muStar^2*y^2)/r7 + (3*lambda_vy*muStar*x)/d5 + ...
            (3*lambda_vx*muStar*y)/d5 - (3*lambda_vy*muStar*x)/r5 - (3*lambda_vx*muStar*y)/r5 + ...
            (15*lambda_vx*muStar*y)/r7 + (15*lambda_vx*muStar^2*y)/d7 - (15*lambda_vx*muStar^3*y)/d7 + ...
            (15*lambda_vy*muStar*y^2)/d7 + (15*lambda_vx*x^2*y)/d7 + (15*lambda_vy*x*y^2)/d7 - ...
            (30*lambda_vx*muStar^2*y)/r7 + (15*lambda_vx*muStar^3*y)/r7 - (15*lambda_vy*muStar*y^2)/r7 - ...
            (15*lambda_vx*muStar*x^2*y)/d7 - (30*lambda_vx*muStar^2*x*y)/d7 - (15*lambda_vy*muStar*x*y^2)/d7 - ...
            (15*lambda_vz*muStar^2*y*z)/d7 + (15*lambda_vx*muStar*x^2*y)/r7 + ...
            (30*lambda_vx*muStar^2*x*y)/r7 + (15*lambda_vy*muStar*x*y^2)/r7 + ...
            (15*lambda_vz*muStar^2*y*z)/r7 + (30*lambda_vx*muStar*x*y)/d7 + ...
            (15*lambda_vz*muStar*y*z)/d7 + (15*lambda_vz*x*y*z)/d7 - ...
            (30*lambda_vx*muStar*x*y)/r7 - (15*lambda_vz*muStar*y*z)/r7 - ...
            (15*lambda_vz*muStar*x*y*z)/d7 + (15*lambda_vz*muStar*x*y*z)/r7;

   A(8,3) = (3*lambda_vz*muStar)/r5 - (3*lambda_vx*z)/d5 - (3*lambda_vz*x)/d5 + ...
            (3*lambda_vz*muStar^2)/d5 - (3*lambda_vz*muStar^2)/r5 - ...
            (3*lambda_vz*muStar)/d5 - (15*lambda_vz*muStar^2*z^2)/d7 + ...
            (15*lambda_vz*muStar^2*z^2)/r7 + (3*lambda_vz*muStar*x)/d5 + ...
            (3*lambda_vx*muStar*z)/d5 - (3*lambda_vz*muStar*x)/r5 - ...
            (3*lambda_vx*muStar*z)/r5 + (15*lambda_vx*muStar*z)/r7 + ...
            (15*lambda_vx*muStar^2*z)/d7 - (15*lambda_vx*muStar^3*z)/d7 + ...
            (15*lambda_vz*muStar*z^2)/d7 + (15*lambda_vx*x^2*z)/d7 + ...
            (15*lambda_vz*x*z^2)/d7 - (30*lambda_vx*muStar^2*z)/r7 + ...
            (15*lambda_vx*muStar^3*z)/r7 - (15*lambda_vz*muStar*z^2)/r7 - ...
            (15*lambda_vx*muStar*x^2*z)/d7 - (30*lambda_vx*muStar^2*x*z)/d7 - ...
            (15*lambda_vz*muStar*x*z^2)/d7 - (15*lambda_vy*muStar^2*y*z)/d7 + ...
            (15*lambda_vx*muStar*x^2*z)/r7 + (30*lambda_vx*muStar^2*x*z)/r7 + ...
            (15*lambda_vz*muStar*x*z^2)/r7 + (15*lambda_vy*muStar^2*y*z)/r7 + ...
            (30*lambda_vx*muStar*x*z)/d7 + (15*lambda_vy*muStar*y*z)/d7 + ...
            (15*lambda_vy*x*y*z)/d7 - (30*lambda_vx*muStar*x*z)/r7 - ...
            (15*lambda_vy*muStar*y*z)/r7 - (15*lambda_vy*muStar*x*y*z)/d7 + ...
            (15*lambda_vy*muStar*x*y*z)/r7;


  A(9,1) = (3*lambda_vy*muStar)/r5 - (3*lambda_vx*y)/d5 - (3*lambda_vy*x)/d5 + ...
           (3*lambda_vy*muStar^2)/d5 - (3*lambda_vy*muStar^2)/r5 - (3*lambda_vy*muStar)/d5 - ...
           (15*lambda_vy*muStar^2*y^2)/d7 + (15*lambda_vy*muStar^2*y^2)/r7 + ...
           (3*lambda_vy*muStar*x)/d5 + (3*lambda_vx*muStar*y)/d5 - (3*lambda_vy*muStar*x)/r5 - ...
           (3*lambda_vx*muStar*y)/r5 + (15*lambda_vx*muStar*y)/r7 + (15*lambda_vx*muStar^2*y)/d7 - ...
           (15*lambda_vx*muStar^3*y)/d7 + (15*lambda_vy*muStar*y^2)/d7 + (15*lambda_vx*x^2*y)/d7 + ...
           (15*lambda_vy*x*y^2)/d7 - (30*lambda_vx*muStar^2*y)/r7 + (15*lambda_vx*muStar^3*y)/r7 - ...
           (15*lambda_vy*muStar*y^2)/r7 - (15*lambda_vx*muStar*x^2*y)/d7 - ...
           (30*lambda_vx*muStar^2*x*y)/d7 - (15*lambda_vy*muStar*x*y^2)/d7 - ...
           (15*lambda_vz*muStar^2*y*z)/d7 + (15*lambda_vx*muStar*x^2*y)/r7 + ...
           (30*lambda_vx*muStar^2*x*y)/r7 + (15*lambda_vy*muStar*x*y^2)/r7 + ...
           (15*lambda_vz*muStar^2*y*z)/r7 + (30*lambda_vx*muStar*x*y)/d7 + ...
           (15*lambda_vz*muStar*y*z)/d7 + (15*lambda_vz*x*y*z)/d7 - ...
           (30*lambda_vx*muStar*x*y)/r7 - (15*lambda_vz*muStar*y*z)/r7 - ...
           (15*lambda_vz*muStar*x*y*z)/d7 + (15*lambda_vz*muStar*x*y*z)/r7;

  A(9,2) = (3*lambda_vx*muStar)/r5 - (9*lambda_vy*y)/d5 - (3*lambda_vz*z)/d5 - ...
           (3*lambda_vx*x)/d5 + (3*lambda_vx*muStar^2)/d5 + (15*lambda_vy*y^3)/d7 - ...
           (3*lambda_vx*muStar^2)/r5 - (3*lambda_vx*muStar)/d5 - ...
           (15*lambda_vx*muStar^2*y^2)/d7 + (15*lambda_vx*muStar^2*y^2)/r7 + ...
           (3*lambda_vx*muStar*x)/d5 + (9*lambda_vy*muStar*y)/d5 + (3*lambda_vz*muStar*z)/d5 - ...
           (3*lambda_vx*muStar*x)/r5 - (9*lambda_vy*muStar*y)/r5 - (3*lambda_vz*muStar*z)/r5 + ...
           (15*lambda_vx*muStar*y^2)/d7 - (15*lambda_vy*muStar*y^3)/d7 + (15*lambda_vx*x*y^2)/d7 + ...
           (15*lambda_vz*y^2*z)/d7 - (15*lambda_vx*muStar*y^2)/r7 + (15*lambda_vy*muStar*y^3)/r7 - ...
           (15*lambda_vx*muStar*x*y^2)/d7 - (15*lambda_vz*muStar*y^2*z)/d7 + ...
           (15*lambda_vx*muStar*x*y^2)/r7 + (15*lambda_vz*muStar*y^2*z)/r7;

  A(9,3) = (3*lambda_vz*muStar*y)/d5 - (3*lambda_vy*z)/d5 - (3*lambda_vz*y)/d5 + ...
           (3*lambda_vy*muStar*z)/d5 - (3*lambda_vz*muStar*y)/r5 - (3*lambda_vy*muStar*z)/r5 + ...
           (15*lambda_vy*y^2*z)/d7 + (15*lambda_vz*y*z^2)/d7 - (15*lambda_vx*muStar^2*y*z)/d7 - ...
           (15*lambda_vy*muStar*y^2*z)/d7 - (15*lambda_vz*muStar*y*z^2)/d7 + ...
           (15*lambda_vx*muStar^2*y*z)/r7 + (15*lambda_vy*muStar*y^2*z)/r7 + ...
           (15*lambda_vz*muStar*y*z^2)/r7 + (15*lambda_vx*muStar*y*z)/d7 + ...
           (15*lambda_vx*x*y*z)/d7 - (15*lambda_vx*muStar*y*z)/r7 - ...
           (15*lambda_vx*muStar*x*y*z)/d7 + (15*lambda_vx*muStar*x*y*z)/r7;


  A(10,1) = (3*lambda_vz*muStar)/r5 - (3*lambda_vx*z)/d5 - (3*lambda_vz*x)/d5 + ...
            (3*lambda_vz*muStar^2)/d5 - (3*lambda_vz*muStar^2)/r5 - ...
            (3*lambda_vz*muStar)/d5 - (15*lambda_vz*muStar^2*z^2)/d7 + ...
            (15*lambda_vz*muStar^2*z^2)/r7 + (3*lambda_vz*muStar*x)/d5 + ...
            (3*lambda_vx*muStar*z)/d5 - (3*lambda_vz*muStar*x)/r5 - ...
            (3*lambda_vx*muStar*z)/r5 + (15*lambda_vx*muStar*z)/r7 + ...
            (15*lambda_vx*muStar^2*z)/d7 - (15*lambda_vx*muStar^3*z)/d7 + ...
            (15*lambda_vz*muStar*z^2)/d7 + (15*lambda_vx*x^2*z)/d7 + ...
            (15*lambda_vz*x*z^2)/d7 - (30*lambda_vx*muStar^2*z)/r7 + ...
            (15*lambda_vx*muStar^3*z)/r7 - (15*lambda_vz*muStar*z^2)/r7 - ...
            (15*lambda_vx*muStar*x^2*z)/d7 - (30*lambda_vx*muStar^2*x*z)/d7 - ...
            (15*lambda_vz*muStar*x*z^2)/d7 - (15*lambda_vy*muStar^2*y*z)/d7 + ...
            (15*lambda_vx*muStar*x^2*z)/r7 + (30*lambda_vx*muStar^2*x*z)/r7 + ...
            (15*lambda_vz*muStar*x*z^2)/r7 + (15*lambda_vy*muStar^2*y*z)/r7 + ...
            (30*lambda_vx*muStar*x*z)/d7 + (15*lambda_vy*muStar*y*z)/d7 + ...
            (15*lambda_vy*x*y*z)/d7 - (30*lambda_vx*muStar*x*z)/r7 - ...
            (15*lambda_vy*muStar*y*z)/r7 - (15*lambda_vy*muStar*x*y*z)/d7 + ...
            (15*lambda_vy*muStar*x*y*z)/r7;

  A(10,2) = (3*lambda_vz*muStar*y)/d5 - (3*lambda_vy*z)/d5 - (3*lambda_vz*y)/d5 + ...
            (3*lambda_vy*muStar*z)/d5 - (3*lambda_vz*muStar*y)/r5 - ...
            (3*lambda_vy*muStar*z)/r5 + (15*lambda_vy*y^2*z)/d7 + ...
            (15*lambda_vz*y*z^2)/d7 - (15*lambda_vx*muStar^2*y*z)/d7 - ...
            (15*lambda_vy*muStar*y^2*z)/d7 - (15*lambda_vz*muStar*y*z^2)/d7 + ...
            (15*lambda_vx*muStar^2*y*z)/r7 + (15*lambda_vy*muStar*y^2*z)/r7 + ...
            (15*lambda_vz*muStar*y*z^2)/r7 + (15*lambda_vx*muStar*y*z)/d7 + ...
            (15*lambda_vx*x*y*z)/d7 - (15*lambda_vx*muStar*y*z)/r7 - ...
            (15*lambda_vx*muStar*x*y*z)/d7 + (15*lambda_vx*muStar*x*y*z)/r7;

  A(10,3) = (3*lambda_vx*muStar)/r5 - (3*lambda_vy*y)/d5 - (9*lambda_vz*z)/d5 - ...
            (3*lambda_vx*x)/d5 + (3*lambda_vx*muStar^2)/d5 + (15*lambda_vz*z^3)/d7 - ...
            (3*lambda_vx*muStar^2)/r5 - (3*lambda_vx*muStar)/d5 - (15*lambda_vx*muStar^2*z^2)/d7 + ...
            (15*lambda_vx*muStar^2*z^2)/r7 + (3*lambda_vx*muStar*x)/d5 + (3*lambda_vy*muStar*y)/d5 + ...
            (9*lambda_vz*muStar*z)/d5 - (3*lambda_vx*muStar*x)/r5 - (3*lambda_vy*muStar*y)/r5 - ...
            (9*lambda_vz*muStar*z)/r5 + (15*lambda_vx*muStar*z^2)/d7 - (15*lambda_vz*muStar*z^3)/d7 + ...
            (15*lambda_vx*x*z^2)/d7 + (15*lambda_vy*y*z^2)/d7 - (15*lambda_vx*muStar*z^2)/r7 + ...
            (15*lambda_vz*muStar*z^3)/r7 - (15*lambda_vx*muStar*x*z^2)/d7 - ...
            (15*lambda_vy*muStar*y*z^2)/d7 + (15*lambda_vx*muStar*x*z^2)/r7 + ...
            (15*lambda_vy*muStar*y*z^2)/r7;

   A(11,8)  = -1;
   A(12,9)  = -1;
   A(13,10) = -1;
    A(14,7) = (2*Tmax*lambda_v_Mag*u)/m^3;
A(14,11:13) = -Tmax.*lambda_v(:)'.*u./(lambda_v_Mag.*m^2);

 phiDot = A*PHI;
   yDot = [yDot; phiDot(:)];
end

end